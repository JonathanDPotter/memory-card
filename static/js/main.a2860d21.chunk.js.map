{"version":3,"sources":["components/Cards.js","components/GameBoard.js","App.js","index.js"],"names":["Cards","props","id","className","symbols","map","sym","i","onClick","handleClick","makeCards","GameBoard","reset","score","topScore","status","App","useState","setScore","setTopScore","clicked","setClicked","setStatus","setSymbols","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","event","target","includes","preventDefault","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sMAgBeA,EAhBD,SAACC,GAab,OAAO,qBAAKC,GAAG,QAAQC,UAAU,QAA1B,SAAmCF,EAAMG,QAAQC,KAAI,SAACC,EAAKC,GAAN,OAX1C,SAAUD,EAAKC,GAC/B,OACE,qBAEEJ,UAAU,OACVD,GAAII,EACJE,QAASP,EAAMQ,YAJjB,SAKEH,GAJKC,GAQ6DG,CAAUJ,EAAKC,SCiC1EI,EA5CG,SAACV,GACjB,OACE,sBAAKC,GAAG,YAAYC,UAAU,YAA9B,UACE,yBAAQD,GAAG,SAASC,UAAU,OAA9B,UACE,oBAAID,GAAG,QAAQC,UAAU,QAAzB,yBAGA,mBAAGD,GAAG,cAAcC,UAAU,cAA9B,+CAGA,wBAAQD,GAAG,QAAQC,UAAU,MAAMK,QAASP,EAAMW,MAAlD,sBAIF,sBAAKV,GAAG,aAAaC,UAAU,aAA/B,UACE,sBAAKD,GAAG,SAASC,UAAU,SAA3B,UACE,sBAAKD,GAAG,aAAaC,UAAU,WAA/B,UACE,oBAAID,GAAG,cAAcC,UAAU,cAA/B,mBAGA,oBAAID,GAAG,QAAQC,UAAU,QAAzB,SACGF,EAAMY,WAGX,sBAAKX,GAAG,aAAaC,UAAU,WAA/B,UACE,oBAAID,GAAG,kBAAkBC,UAAU,cAAnC,uBAGA,oBAAID,GAAG,YAAYC,UAAU,QAA7B,SACGF,EAAMa,iBAIb,qBAAKZ,GAAG,WAAWC,UAAU,WAA7B,SACE,cAAC,EAAD,CAAOM,YAAaR,EAAMQ,YAAaL,QAASH,EAAMG,YAExD,qBAAKF,GAAG,aAAaC,UAA4B,aAAjBF,EAAMc,OAAwB,aAAc,iBAA5E,SACGd,EAAMc,gB,MC0CFC,MA7Ef,WAAgB,IAAD,EACaC,mBAAS,GADtB,mBACNJ,EADM,KACCK,EADD,OAEeD,mBAAS,GAFxB,mBAEVH,EAFU,KAEAK,EAFA,OAGaF,mBAAS,IAHtB,mBAGVG,EAHU,KAGDC,EAHC,OAIWJ,mBAAS,eAJpB,mBAIVF,EAJU,KAIFO,EAJE,OAKaL,mBAAS,CAC/B,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,MAdS,mBAKVb,EALU,KAKDmB,EALC,KAkBPC,EAAU,SAAUC,GAMxB,IALA,IACEC,EACAC,EAFEC,EAAeH,EAAMI,OAKlB,IAAMD,GAEXD,EAAcG,KAAKC,MAAMD,KAAKE,SAAWJ,GAIzCF,EAAiBD,EAHjBG,GAAgB,GAIhBH,EAAMG,GAAgBH,EAAME,GAC5BF,EAAME,GAAeD,EAGvB,OAAOD,GA4BT,OACE,qBAAKtB,UAAU,MAAf,SACE,cAAC,EAAD,CACEU,MAAOA,EACPC,SAAUA,EACVC,OAAQA,EACRX,QAASA,EACTK,YAhCc,SAAUwB,GAAQ,IAC5B/B,EAAO+B,EAAMC,OAAbhC,GACJkB,EAAQe,SAASjC,IACfW,EAAQC,GACVK,GAAY,SAACL,GAAD,OAAcD,KAE5BK,GAAS,SAACL,GAAD,OAAW,KACpBQ,GAAW,SAACD,GAAD,MAAa,MACxBE,GAAU,SAACP,GAAD,MAAY,gBAEtBG,GAAS,SAACL,GAAD,OAAWA,EAAQ,KAC5BQ,GAAW,SAACD,GAAD,4BAAiBA,GAAjB,CAA0BlB,OACrCoB,GAAU,SAACP,GAAD,MAAY,kBAExBQ,GAAW,SAACnB,GAAD,OAAaoB,EAAQpB,OAmB5BQ,MAhBQ,SAAUqB,GACtBA,EAAMG,iBACNlB,GAAS,SAACL,GAAD,OAAW,KACpBM,GAAY,SAACL,GAAD,OAAc,KAC1BQ,GAAU,SAACP,GAAD,MAAY,iBACtBS,EAAQpB,SC5DZiC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.a2860d21.chunk.js","sourcesContent":["const Cards = (props) => {\n  \n  const makeCards = function (sym, i) {\n    return (\n      <div\n        key={i}\n        className=\"card\"\n        id={sym}\n        onClick={props.handleClick}\n      >{sym}</div>\n    );\n  };\n\n  return <div id=\"cards\" className=\"cards\">{props.symbols.map((sym, i) => makeCards(sym, i))}</div>;\n};\n\nexport default Cards;\n","import Cards from \"./Cards\";\n\nconst GameBoard = (props) => {\n  return (\n    <div id=\"full-page\" className=\"full-page\">\n      <header id=\"header\" className=\"head\">\n        <h1 id=\"title\" className=\"title\">\n          Memory Game\n        </h1>\n        <p id=\"description\" className=\"description\">\n          Don't choose the same card twice!\n        </p>\n        <button id=\"reset\" className=\"btn\" onClick={props.reset}>\n          Reset\n        </button>\n      </header>\n      <div id=\"play-field\" className=\"play-field\">\n        <div id=\"scores\" className=\"scores\">\n          <div id=\"scorebox-1\" className=\"scorebox\">\n            <h1 id=\"score-title\" className=\"score-title\">\n              Score\n            </h1>\n            <h1 id=\"score\" className=\"score\">\n              {props.score}\n            </h1>\n          </div>\n          <div id=\"scorebox-2\" className=\"scorebox\">\n            <h1 id=\"top-score-title\" className=\"score-title\">\n              Top Score\n            </h1>\n            <h1 id=\"top-score\" className=\"score\">\n              {props.topScore}\n            </h1>\n          </div>\n        </div>\n        <div id=\"card-box\" className=\"card-box\">\n          <Cards handleClick={props.handleClick} symbols={props.symbols} />\n        </div>\n        <div id=\"status-box\" className={props.status !== \"You lose\" ? \"status-box\": \"status-box red\"}>\n          {props.status}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default GameBoard;\n","import React, { useState } from \"react\";\nimport GameBoard from \"./components/GameBoard\";\nimport \"./style.scss\";\n\nfunction App() {\n  const [score, setScore] = useState(0),\n    [topScore, setTopScore] = useState(0),\n    [clicked, setClicked] = useState([]),\n    [status, setStatus] = useState(\"Pick a card\"),\n    [symbols, setSymbols] = useState([\n      \"!\",\n      \"@\",\n      \"#\",\n      \"$\",\n      \"%\",\n      \"^\",\n      \"&\",\n      \"*\",\n      \"+\",\n    ]);\n\n  // shuffle function found on stackoverflow https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\n  const shuffle = function (array) {\n    let currentIndex = array.length,\n      temporaryValue,\n      randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  };\n\n  const handleClick = function (event) {\n    const { id } = event.target;\n    if (clicked.includes(id)) {\n      if (score > topScore) {\n        setTopScore((topScore) => score);\n      }\n      setScore((score) => 0);\n      setClicked((clicked) => []);\n      setStatus((status) => \"You lose\");\n    } else {\n      setScore((score) => score + 1);\n      setClicked((clicked) => [...clicked, id]);\n      setStatus((status) => \"Pick a card\")\n    }\n    setSymbols((symbols) => shuffle(symbols));\n  };\n\n  const reset = function (event) {\n    event.preventDefault();\n    setScore((score) => 0);\n    setTopScore((topScore) => 0);\n    setStatus((status) => \"Pick a card\");\n    shuffle(symbols);\n  }\n\n  return (\n    <div className=\"App\">\n      <GameBoard\n        score={score}\n        topScore={topScore}\n        status={status}\n        symbols={symbols}\n        handleClick={handleClick}\n        reset={reset}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}